{
    "fs": "#version 330\n\nout vec4 outColor;\n\nuniform vec4 baseColor;\nuniform float metallic;\nuniform float subsurface;\nuniform float specular;\nuniform float roughness;\nuniform float specularTint;\nuniform float anisotropic;\nuniform float sheen;\nuniform float sheenTint;\nuniform float clearcoat;\nuniform float clearcoatGloss;\n\nuniform bool mulByNdotL = false;\nuniform float gamma = 1;\n\nin VS\n{\n\tvec3 pos;\n\tvec3 normal;\n\tvec3 tangent;\n\tvec3 bitangent;\n} vs;\n\nin vec3 light;\n\n//\n// BRDF as found in https://github.com/wdas/brdf/blob/master/src/brdfs/disney.brdf\n//\nconst float PI = 3.14159265358979323846;\n\nfloat sqr(float x) { return x*x; }\n\nfloat SchlickFresnel(float u)\n{\n    float m = clamp(1-u, 0, 1);\n    float m2 = m*m;\n    return m2*m2*m; // pow(m,5)\n}\n\nfloat GTR1(float NdotH, float a)\n{\n    if (a >= 1) return 1/PI;\n    float a2 = a*a;\n    float t = 1 + (a2-1)*NdotH*NdotH;\n    return (a2-1) / (PI*log(a2)*t);\n}\n\nfloat GTR2(float NdotH, float a)\n{\n    float a2 = a*a;\n    float t = 1 + (a2-1)*NdotH*NdotH;\n    return a2 / (PI * t*t);\n}\n\nfloat GTR2_aniso(float NdotH, float HdotX, float HdotY, float ax, float ay)\n{\n    return 1 / (PI * ax*ay * sqr( sqr(HdotX/ax) + sqr(HdotY/ay) + NdotH*NdotH ));\n}\n\nfloat smithG_GGX(float NdotV, float alphaG)\n{\n    float a = alphaG*alphaG;\n    float b = NdotV*NdotV;\n    return 1 / (NdotV + sqrt(a + b - a*b));\n}\n\nfloat smithG_GGX_aniso(float NdotV, float VdotX, float VdotY, float ax, float ay)\n{\n    return 1 / (NdotV + sqrt( sqr(VdotX*ax) + sqr(VdotY*ay) + sqr(NdotV) ));\n}\n\nvec3 mon2lin(vec3 x)\n{\n    return vec3(pow(x[0], 2.2), pow(x[1], 2.2), pow(x[2], 2.2));\n}\n\nvec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )\n{\n    float NdotL = dot(N,L);\n    float NdotV = dot(N,V);\n    if (NdotL < 0 || NdotV < 0) return vec3(0);\n\n    vec3 H = normalize(L+V);\n    float NdotH = dot(N,H);\n    float LdotH = dot(L,H);\n\n    vec3 Cdlin = mon2lin(baseColor.rgb);\n    float Cdlum = .3*Cdlin[0] + .6*Cdlin[1]  + .1*Cdlin[2]; // luminance approx.\n\n    vec3 Ctint = Cdlum > 0 ? Cdlin/Cdlum : vec3(1); // normalize lum. to isolate hue+sat\n    vec3 Cspec0 = mix(specular*.08*mix(vec3(1), Ctint, specularTint), Cdlin, metallic);\n    vec3 Csheen = mix(vec3(1), Ctint, sheenTint);\n\n    // Diffuse fresnel - go from 1 at normal incidence to .5 at grazing\n    // and mix in diffuse retro-reflection based on roughness\n    float FL = SchlickFresnel(NdotL), FV = SchlickFresnel(NdotV);\n    float Fd90 = 0.5 + 2 * LdotH*LdotH * roughness;\n    float Fd = mix(1.0, Fd90, FL) * mix(1.0, Fd90, FV);\n\n    // Based on Hanrahan-Krueger brdf approximation of isotropic bssrdf\n    // 1.25 scale is used to (roughly) preserve albedo\n    // Fss90 used to \"flatten\" retroreflection based on roughness\n    float Fss90 = LdotH*LdotH*roughness;\n    float Fss = mix(1.0, Fss90, FL) * mix(1.0, Fss90, FV);\n    float ss = 1.25 * (Fss * (1 / (NdotL + NdotV) - .5) + .5);\n\n    // specular\n    float aspect = sqrt(1-anisotropic*.9);\n    float ax = max(.001, sqr(roughness)/aspect);\n    float ay = max(.001, sqr(roughness)*aspect);\n    float Ds = GTR2_aniso(NdotH, dot(H, X), dot(H, Y), ax, ay);\n    float FH = SchlickFresnel(LdotH);\n    vec3 Fs = mix(Cspec0, vec3(1), FH);\n    float Gs;\n    Gs  = smithG_GGX_aniso(NdotL, dot(L, X), dot(L, Y), ax, ay);\n    Gs *= smithG_GGX_aniso(NdotV, dot(V, X), dot(V, Y), ax, ay);\n\n    // sheen\n    vec3 Fsheen = FH * sheen * Csheen;\n\n    // clearcoat (ior = 1.5 -> F0 = 0.04)\n    float Dr = GTR1(NdotH, mix(.1,.001,clearcoatGloss));\n    float Fr = mix(.04, 1.0, FH);\n    float Gr = smithG_GGX(NdotL, .25) * smithG_GGX(NdotV, .25);\n\n    return ((1/PI) * mix(Fd, ss, subsurface)*Cdlin + Fsheen)\n        * (1-metallic)\n        + Gs*Fs*Ds + .25*clearcoat*Gr*Fr*Dr;\n}\n//\n//\n//\n\nvoid main()\n{\n\tvec3 L = normalize(light - vs.pos);\n\tvec3 V = normalize(-vs.pos);\n\tvec3 N = normalize(vs.normal);\n\tvec3 X = normalize(vs.tangent);\n\tvec3 Y = normalize(vs.bitangent);\n\n\t// === unmodified BRDF ===\n\n\tvec3 color = BRDF(L, V, N, X, Y);\n\n\n\t// === additional options found in BRDF explorer ===\n\n\t// 1. multiply result by NdotL\n\tfloat NdotL = max(dot(N, L), 0.0);\n\tcolor = mix(color, color * NdotL, mulByNdotL);\n\n\t// 2. apply additional gamma\n\tcolor = pow(color, vec3(1 / gamma));\n\n\toutColor = vec4(color, 1);\n}",
    "mesh": {
        "path": "",
        "type": 1
    },
    "uniforms": [
        {
            "flags": "RGB",
            "name": "baseColor",
            "type": 6,
            "value": "#ffd1ab29"
        },
        {
            "name": "metallic",
            "type": 0,
            "value": "0"
        },
        {
            "name": "subsurface",
            "type": 0,
            "value": "0"
        },
        {
            "name": "specular",
            "type": 0,
            "value": "0.5"
        },
        {
            "name": "roughness",
            "type": 0,
            "value": "0.5"
        },
        {
            "name": "specularTint",
            "type": 0,
            "value": "0"
        },
        {
            "name": "anisotropic",
            "type": 0,
            "value": "0"
        },
        {
            "name": "sheen",
            "type": 0,
            "value": "0"
        },
        {
            "name": "sheenTint",
            "type": 0,
            "value": "0.5"
        },
        {
            "name": "clearcoat",
            "type": 0,
            "value": "0"
        },
        {
            "name": "clearcoatGloss",
            "type": 0,
            "value": "1"
        },
        {
            "name": "mulByNdotL",
            "type": 0,
            "value": "1"
        },
        {
            "name": "gamma",
            "type": 0,
            "value": "1"
        },
        {
            "name": "lightPos",
            "type": 2,
            "value": "0 10 10"
        }
    ],
    "version": "1",
    "vs": "#version 330\n\n// available builtin vertex data and locations\nlayout (location = 0) in vec3 position;\nlayout (location = 1) in vec3 normal;\nlayout (location = 2) in vec2 uv;\nlayout (location = 3) in vec3 tangent;\nlayout (location = 4) in vec3 bitangent;\n\n// available builtin matrices\nuniform struct\n{\n\tmat4 projection;\n\tmat4 view;\n\tmat4 model;\n    mat4 MV;\n    mat4 MVP;\n\tmat3 normal;\n} matrix;\n\nout VS\n{\n\tvec3 pos;\n\tvec3 normal;\n\tvec3 tangent;\n\tvec3 bitangent;\n} vs;\n\nuniform vec3 lightPos;\n\nout vec3 light;\n\nvoid main()\n{\n\tvec4 vertPos4 = matrix.MV * vec4(position, 1.0);\n\tvs.pos = vec3(vertPos4) / vertPos4.w;\n\n\tvs.normal = matrix.normal * normal;\n\tvs.tangent = matrix.normal * tangent;\n\tvs.bitangent = matrix.normal * bitangent;\n\n\tvec4 lightPos4 = matrix.MV * vec4(lightPos, 1.0);\n\tlight = vec3(lightPos4) / lightPos4.w;\n\n\tgl_Position = matrix.MVP * vec4(position, 1);\n}"
}
