{
    "fs": "/*\n * specular BRDF: http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n * EnvBRDFApprox (instead of BRDFLUT): https://www.unrealengine.com/en-US/blog/physically-based-shading-on-mobile\n * ACES tonemapper: https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl\n */\n#version 330\nout vec4 outColor;\n\nuniform sampler2D sky;\nuniform sampler2D radiance;\nuniform sampler2D irradiance;\n\nuniform sampler2D albedo;\nuniform sampler2D normal;\nuniform sampler2D material;\nuniform sampler2D emissive;\n\nuniform vec4 lightColor;\n\nuniform float emissiveIntensity;\nuniform float exposure;\n\nin struct\n{\n\tvec3 light;\n\tvec3 pos;\n\tvec3 normal;\n\tvec2 uv;\n\tmat3 tbn;\n\tvec3 normalW;\n\tvec3 viewW;\n\tvec3 posW;\n} vs;\n\nconst float PI = 3.14159265358979323846;\nconst float PI2 = 2 * PI;\nvec2 SampleSphericalMap(in vec3 v)\n{\n\treturn vec2(atan(v.z, v.x) / PI2, asin(v.y) / PI) + 0.5;\n}\n\nvec2 FlipV(in vec2 uv)\n{\n\treturn vec2(uv.s, 1 - uv.t);\n}\n\nfloat pow2(in float x)\n{\n\treturn x * x;\n}\n\nvec3 DecodeBC5Normal(in sampler2D n, in vec2 uv)\n{\n\tvec3 N = vec3(texture(n, uv).rg, 0) * 2 - 1;\n\tN.z = sqrt(1 - pow2(N.x) - pow2(N.y));\n\n\treturn N;\n}\n\nvec3 DecodeNormal(in sampler2D n, in vec2 uv)\n{\n\treturn texture(n, uv).xyz * 2 - 1;\n}\n\nfloat saturate(in float x)\n{\n\treturn clamp(x, 0, 1);\n}\n\nvec3 saturate(in vec3 x)\n{\n\treturn vec3(saturate(x.x), saturate(x.y), saturate(x.z));\n}\n\nfloat pow5(in float x)\n{\n\tfloat x2 = x * x;\n\treturn x2 * x2 * x;\n}\n\nvec3 F_Schlick(in vec3 f0, in float product)\n{\n    return f0 + (vec3(1.0) - f0) * pow5(1.0 - product);\n}\n\nfloat G_Smith_GGX(float NdotL, float NdotV, float r)\n{\n\tfloat r2 = pow2(r);\n    float G_l = 2.0 * NdotL / max(0.001, (NdotL + sqrt(r2 + (1.0 - r2) * pow2(NdotL))));\n    float G_v = 2.0 * NdotV / max(0.001, (NdotV + sqrt(r2 + (1.0 - r2) * pow2(NdotV))));\n\n    return G_l * G_v;\n}\n\nfloat NDF_BlinnPhong(float NdotH, float r)\n{\n\tfloat r2 = pow2(r);\n\tfloat specPower = (2 / r2 - 2);\n\n\treturn (1 / max(0.001, (PI * r2))) * pow(NdotH, specPower);\n}\n\nvec3 EnvBRDFApprox(in vec3 SpecularColor, in float Roughness, in float NoV)\n{\n\tvec4 c0 = vec4(-1, -0.0275, -0.572, 0.022 );\n\tvec4 c1 = vec4(1, 0.0425, 1.0, -0.04 );\n\tvec4 r = Roughness * c0 + c1;\n\tfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n\tvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n\treturn SpecularColor * AB.x + AB.y;\n}\n\nvec3 tonemap(in vec3 color)\n{\n\tmat3 ACESInput = mat3(0.59719, 0.35458, 0.04823,\n\t                      0.07600, 0.90834, 0.01566,\n\t                      0.02840, 0.13383, 0.83777);\n\n\tmat3 ACESOutput = mat3( 1.60475, -0.53108, -0.07367,\n\t                       -0.10208,  1.10813, -0.00605,\n\t                       -0.00327, -0.07276,  1.07602);\n\n\tvec3 c = color * ACESInput;\n\n\tvec3 a = c * (c + 0.0245786) - 0.000090537;\n    vec3 b = c * (0.983729 * c + 0.4329510) + 0.238081;\n\n\treturn saturate(a / b * ACESOutput);\n}\n\nvoid main()\n{\n\tvec3 albedo = texture(albedo, FlipV(vs.uv)).rgb;\n\tvec3 material = texture(material, FlipV(vs.uv)).rgb;\n\n\tfloat roughness = pow2(saturate(material.r));\n\tfloat ao = material.g;\n\tfloat metalness = material.b;\n\n\tvec3 emissive = texture(emissive, FlipV(vs.uv)).rgb;\n\n\t// current normal is encoded as BC5, so a reconstruction is required\n\tvec3 normal = vs.tbn * DecodeBC5Normal(normal, FlipV(vs.uv));\n\n\t// if using a standard normalmap use this instead\n\t// (standard remap of XYZ from [0,1] to [-1,1])\n\t//vec3 normal = vs.tbn * DecodeNormal(normal, FlipV(vs.uv));\n\n    vec3 L = normalize(vs.light - vs.pos);\n    vec3 V = normalize(-vs.pos);\n    vec3 H = normalize(L + V);\n    vec3 N = normalize(normal);\n\n\tvec3 V_WS = normalize(vs.posW - vs.viewW);\n\tvec3 N_WS = normalize(vs.normalW);\n\tvec3 R_WS = normalize(reflect(V_WS, N_WS));\n\n\tfloat NdotL = max(0, dot(N, L));\n    float NdotV = max(0, dot(N, V));\n    float NdotH = max(0, dot(N, H));\n    float VdotH = max(0, dot(V, H));\n    float LdotV = max(0, dot(L, V));\n\n\tvec3 diffuseColor = albedo * (1 - metalness);\n\tvec3 specularColor = mix(vec3(0.04), diffuseColor, metalness);\n\n\t//\n\t// Direct contribution\n\t//\n\t// diffuse: lambert\n\tvec3 directDiffuse = diffuseColor / PI;\n\n\t// specular: cook-torrance (D F G) / (4 NoL NoV)\n\tvec3 F = F_Schlick(specularColor, VdotH);\n\tfloat G = G_Smith_GGX(NdotL, NdotV, roughness);\n\tfloat D = NDF_BlinnPhong(NdotH, roughness);\n\tvec3 directSpecular = F * G * D / max(0.001, (4.0 * NdotL * NdotV));\n\n\tvec3 direct = (1 - F) * directDiffuse + directSpecular;\n\t     direct *= lightColor.rgb;\n  \t     direct *= NdotL;\n\n\n\t//\n\t// Indirect (IBL) contribution\n\t//\n\tvec3 radianceColor = texture(radiance, FlipV(SampleSphericalMap(R_WS))).rgb;\n\tvec3 irradianceColor = texture(irradiance, FlipV(SampleSphericalMap(N_WS))).rgb;\n\n\tvec3 indirectDiffuse = irradianceColor * (diffuseColor / PI);\n\tvec3 indirectSpecular = radianceColor * EnvBRDFApprox(specularColor, roughness, NdotV);\n\t\n\tvec3 indirect = indirectDiffuse + indirectSpecular;\n\n\tvec3 finalColor = direct + indirect;\n\tfinalColor *= ao;\n\tfinalColor += emissive * emissiveIntensity;\n\tfinalColor *= exposure;\n\n\toutColor = vec4(tonemap(finalColor), 1);\n\n\t// \"debug\" views\n\t//outColor = vec4(albedo, 1);\n\t//outColor = vec4((N + 1) / 2, 1);\n\t//outColor = vec4((N_WS + 1) / 2, 1);\n\t//outColor = vec4(vec3(roughness), 1);\n\t//outColor = vec4(vec3(metalness), 1);\n\t//outColor = vec4(vec3(ao),1);\n\t//outColor = vec4(direct,1);\n\t//outColor = vec4(indirect,1);\n}\n",
    "mesh": {
        "path": "./models/helmet.obj",
        "type": 2
    },
    "uniforms": [
        {
            "flags": "sRGB",
            "name": "albedo",
            "type": 7,
            "value": "./textures/helmet-albedo.dds"
        },
        {
            "flags": "RGB",
            "name": "normal",
            "type": 7,
            "value": "./textures/helmet-normal.dds"
        },
        {
            "flags": "RGB",
            "name": "material",
            "type": 7,
            "value": "./textures/helmet-r-ao-m.dds"
        },
        {
            "flags": "sRGB",
            "name": "emissive",
            "type": 7,
            "value": "./textures/helmet-emissive.dds"
        },
        {
            "flags": "sRGB",
            "name": "sky",
            "type": 7,
            "value": "./textures/Road_to_MonumentValley_2k.jpg"
        },
        {
            "flags": "RGB",
            "name": "irradiance",
            "type": 7,
            "value": "./textures/Road_to_MonumentValley_irradiance.dds"
        },
        {
            "flags": "RGB",
            "name": "radiance",
            "type": 7,
            "value": "./textures/Road_to_MonumentValley_radiance.dds"
        },
        {
            "name": "lightPos",
            "type": 2,
            "value": "0.15 0.5 -1"
        },
        {
            "flags": "sRGB",
            "name": "lightColor",
            "type": 6,
            "value": "#ffffffff"
        },
        {
            "name": "exposure",
            "type": 0,
            "value": "3.5"
        },
        {
            "name": "emissiveIntensity",
            "type": 0,
            "value": "1"
        }
    ],
    "version": "1",
    "vs": "#version 330\n\n// available builtin vertex data and locations\nlayout (location = 0) in vec3 position;\nlayout (location = 1) in vec3 normal;\nlayout (location = 2) in vec2 uv;\nlayout (location = 3) in vec3 tangent;\nlayout (location = 4) in vec3 bitangent;\n\n// available builtin matrices\nuniform struct\n{\n\tmat4 projection;\n\tmat4 view;\n\tmat4 model;\n    mat4 MV;\n    mat4 MVP;\n    mat3 normal;\n} matrix;\n\nuniform struct\n{\n    vec3 camera; // camera (world)\n    vec2 window; // viewport size\n} data;\n\nuniform vec3 lightPos = vec3(1,1,0);\n\nout struct\n{\n\tvec3 light;\n\tvec3 pos;\n\tvec3 normal;\n\tvec2 uv;\n\tmat3 tbn;\n\tvec3 normalW;\n\tvec3 viewW;\n\tvec3 posW;\n} vs;\n\nvoid main()\n{\n\tvs.uv = uv;\n\t\n\tvec4 vertPos4 = matrix.MV * vec4(position, 1.0);\n\tvs.pos = vec3(vertPos4) / vertPos4.w;\n\n\tvs.posW = (matrix.model * vec4(position, 1.0)).xyz;\n\tvs.viewW = data.camera;\n\tvs.normalW = mat3(matrix.model) * normal;\n\n\tvs.normal = matrix.normal * normal;\n\tvec3 tangentVS = matrix.normal * tangent;\n\tvec3 bitangentVS = matrix.normal * bitangent;\n\tvs.tbn = mat3(bitangentVS, tangentVS, vs.normal);\n\n\tvec4 lightPos4 = matrix.view * vec4(lightPos, 1.0);\n\tvs.light = vec3(lightPos4) / lightPos4.w;\n\n\tgl_Position = matrix.MVP * vec4(position, 1);\n}\n"
}
